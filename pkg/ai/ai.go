package ai

import (
	"fmt"
	"os/exec"
	"strings"
)

type AISummarizer interface {
	GenerateSummary(text string, prompt string) (string, error)
}

// ExternalAISummarizer is a concrete implementation of AISummarizer that calls an external AI command.
type ExternalAISummarizer struct {
	CommandTemplate string
}

func (e *ExternalAISummarizer) GenerateSummary(text string, prompt string) (string, error) {
	if e.CommandTemplate == "" {
		return "", fmt.Errorf("AI command template is not configured")
	}

	// Escape single quotes in text and prompt for shell safety
	// Replace ' with '\'' (end quote, escaped quote, start quote)
	escapedText := strings.ReplaceAll(text, "'", "'\\''")
	escapedPrompt := strings.ReplaceAll(prompt, "'", "'\\''")

	// Replace placeholders in command template
	// Supported placeholders: {PROMPT}, {TEXT}
	cmdString := e.CommandTemplate
	cmdString = strings.ReplaceAll(cmdString, "{PROMPT}", escapedPrompt)
	cmdString = strings.ReplaceAll(cmdString, "{TEXT}", escapedText)

	// Parse the command string into command and args
	// Use shell to execute the command to handle complex arguments properly
	cmd := exec.Command("sh", "-c", cmdString)
	output, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("failed to execute AI command '%s': %w", cmdString, err)
	}

	return strings.TrimSpace(string(output)), nil
}

// PlaceholderAISummarizer is a concrete implementation of AISummarizer that returns a predefined summary.
type PlaceholderAISummarizer struct {
	Err            error
	CommandTemplate string
}

func (p *PlaceholderAISummarizer) GenerateSummary(text string, prompt string) (string, error) {
	if p.Err != nil {
		return "", p.Err
	}
	// In a real scenario, this would call an AI model using p.CommandTemplate.
	// For now, it returns a simple placeholder summary.
	return "This is a placeholder summary generated by the AI agent.", nil
}

// NewAISummarizer creates a new AISummarizer based on the provided command template.
func NewAISummarizer(commandTemplate string) AISummarizer {
	if commandTemplate != "" {
		return &ExternalAISummarizer{CommandTemplate: commandTemplate}
	}
	// Fallback to PlaceholderAISummarizer if no command template is provided
	return &PlaceholderAISummarizer{}
}

// MockAISummarizer is a mock implementation of the AISummarizer interface for testing.
type MockAISummarizer struct {
	Summary string
	Err     error
}

func (m *MockAISummarizer) GenerateSummary(text string, prompt string) (string, error) {
	return m.Summary, m.Err
}

